import { useState, useContext } from 'react';
import type { NextPage } from 'next';
import Link from 'next/link';
import Head from 'next/head';
import { AuthContext } from '../context/AuthContext';
import * as Yup from 'yup';
import { Formik, Form, Field } from 'formik';
import axios from 'axios';

type Notification = {
    message?: string;
    success?: boolean;
};

type Values = {
    name: string;
    email: string;
    password: string;
};

const Register: NextPage = () => {
    const { _setAuth, _setUsername } = useContext(AuthContext);
    const [notif, setNotif] = useState<Notification>();
    const [isLoading, setIsLoading] = useState<boolean>(false);

    const formSchema = Yup.object().shape({
        name: Yup.string().min(2, 'Too Short').max(50, 'Too Long').required('Required'),
        email: Yup.string().email('Invalid Email').required('Required'),
        password: Yup.string()
            .min(6, 'Password should be at least six characters long')
            .required('Required'),
        confirmPassword: Yup.string()
            .min(6, 'Password should be at least six characters long')
            .oneOf([Yup.ref('password'), null], "Passwords don't match")
            .required('Required'),
    });

    const signUp = (values: Values) => {
        const { email, password, name } = values;
        setIsLoading(true);
        axios
            .post('/api/user/register', { email, password, name })
            .then((res) => res.data)
            .then((data) => {
                const { name } = data;
                _setAuth!(true);
                _setUsername!(name);
                setIsLoading(false);
                setNotif({
                    success: true,
                    message: 'You have been registered. Welcome!',
                });
                // redirect user to home page
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            })
            .catch((err) => {
                console.error(err);
                setIsLoading(false);
                if (err.response?.status === 401) {
                    setNotif({
                        success: false,
                        message: 'That email is already taken',
                    });
                    return;
                }
                setNotif({
                    success: false,
                    message: 'Server error',
                });
            });
    };

    return (
        <div>
            <Head>
                <title>Grocery App: Log in or Sign up</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="max-w-full">
                <div className="pt-6 flex justify-center">
                    <div className="w-full mx-4 sm:m-0 md:w-3/4 lg:w-1/2 xl:w-1/3">
                        <div className="inline-block">
                            <Link href="/" passHref>
                                <div className="flex items-center gap-1 text-sm font-bold text-gray-500 mb-2">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        className="h-4 w-4"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M7 16l-4-4m0 0l4-4m-4 4h18"
                                        />
                                    </svg>
                                    <p>Home</p>
                                </div>
                            </Link>
                        </div>
                        <div className="bg-white border border-gray-300 p-6">
                            <h3 className="mt-1 text-center font-semibold uppercase">Sign Up</h3>
                            <Formik
                                initialValues={{
                                    name: '',
                                    email: '',
                                    password: '',
                                    confirmPassword: '',
                                }}
                                validationSchema={formSchema}
                                onSubmit={(values: Values) => {
                                    signUp(values);
                                }}
                            >
                                {({ errors, touched }) => (
                                    <Form className="mt-4 w-full flex flex-col w-full">
                                        <div className="mb-3 flex-grow-1">
                                            <div className="mt-1">
                                                <Field
                                                    id="name"
                                                    name="name"
                                                    placeholder="Full Name"
                                                    className={
                                                        errors.name && touched.name
                                                            ? 'textfield border border-red-500'
                                                            : 'textfield focus:outline-none border border-gray-300'
                                                    }
                                                />
                                                {errors.name && touched.name && (
                                                    <small className="font-medium text-red-500">
                                                        {errors.name}
                                                    </small>
                                                )}
                                            </div>
                                        </div>
                                        <div className="mb-3 flex-grow-1">
                                            <div className="mt-1">
                                                <Field
                                                    id="email"
                                                    name="email"
                                                    placeholder="Email"
                                                    className={
                                                        errors.email && touched.email
                                                            ? 'textfield border border-red-500'
                                                            : 'textfield focus:outline-none border border-gray-300'
                                                    }
                                                />
                                                {errors.email && touched.email && (
                                                    <small className="font-medium text-red-500">
                                                        {errors.email}
                                                    </small>
                                                )}
                                            </div>
                                        </div>
                                        <div className="mb-3 flex-grow-1">
                                            <div className="flex justify-between items-end"></div>
                                            <div className="mt-1">
                                                <Field
                                                    type="password"
                                                    id="password"
                                                    name="password"
                                                    placeholder="Password"
                                                    className={
                                                        errors.password && touched.password
                                                            ? 'textfield border border-red-500'
                                                            : 'textfield border border-gray-300'
                                                    }
                                                />
                                                {errors.password && touched.password && (
                                                    <small className="font-medium text-red-500">
                                                        {errors.password}
                                                    </small>
                                                )}
                                            </div>
                                        </div>
                                        <div className="mb-3 flex-grow-1">
                                            <div className="flex justify-between items-end"></div>
                                            <div className="mt-1">
                                                <Field
                                                    type="password"
                                                    id="confirmPassword"
                                                    name="confirmPassword"
                                                    placeholder="Confirm Password"
                                                    className={
                                                        errors.confirmPassword &&
                                                        touched.confirmPassword
                                                            ? 'textfield border border-red-500'
                                                            : 'textfield border border-gray-300'
                                                    }
                                                />
                                                {errors.confirmPassword &&
                                                    touched.confirmPassword && (
                                                        <small className="font-medium text-red-500">
                                                            {errors.confirmPassword}
                                                        </small>
                                                    )}
                                            </div>
                                            {notif && !notif.success && (
                                                <small className="text-red-500 font-medium">
                                                    <span
                                                        className="emojiStyles"
                                                        aria-label="error"
                                                        role="img"
                                                    >
                                                        ❌
                                                    </span>
                                                    {notif.message}
                                                </small>
                                            )}
                                            {notif && notif.success && (
                                                <small className="text-green-600 font-medium">
                                                    <span
                                                        className="emojiStyles"
                                                        aria-label="success"
                                                        role="img"
                                                    >
                                                        ✅
                                                    </span>
                                                    {notif.message}
                                                </small>
                                            )}
                                        </div>
                                        <div className="mt-3 mb-3 flex-grow-1">
                                            {isLoading ? (
                                                <button
                                                    className="bg-gray-700 inline-flex justify-center items-center opacity-75 text-sm sm:text-base text-white p-2 rounded-full uppercase w-full cursor-not-allowed"
                                                    disabled
                                                >
                                                    <svg
                                                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                    >
                                                        <circle
                                                            className="opacity-25"
                                                            cx="12"
                                                            cy="12"
                                                            r="10"
                                                            stroke="currentColor"
                                                            strokeWidth="4"
                                                        ></circle>
                                                        <path
                                                            className="opacity-75"
                                                            fill="currentColor"
                                                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                                        ></path>
                                                    </svg>
                                                    Registering
                                                </button>
                                            ) : (
                                                <button
                                                    type="submit"
                                                    className="bg-gray-700 text-sm sm:text-base text-white p-2 rounded-full uppercase w-full"
                                                >
                                                    Register
                                                </button>
                                            )}
                                        </div>
                                        <div className="text-sm font-medium flex items-center justify-center gap-1 pb-1 text-center text-gray-800">
                                            {'Already have an account?'}{' '}
                                            <div className="hover:underline text-gray-500">
                                                <Link href="/login">Log In</Link>
                                            </div>
                                        </div>
                                    </Form>
                                )}
                            </Formik>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    );
};

export default Register;
